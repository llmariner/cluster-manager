syntax = "proto3";

package llmariner.clusters.server.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/llmariner/cluster-manager/api/v1";


message Cluster {
  string id = 1;
  string name = 2;

  // registration_key is the key used to register the cluster. Only populated
  // when a new cluster is created or from internal gRPC service.
  string registration_key = 3;

  string object = 4;

  // components_statuses is keyed by component name.
  map<string, ComponentStatus> components_statuses = 5;
}

message CreateClusterRequest {
  string name = 1;
}

message ListClustersRequest {
}

message ListClustersResponse {
  string object = 1;
  repeated Cluster data = 2;
}

message GetClusterRequest {
  string id = 1;
}

message DeleteClusterRequest {
  string id = 1;
}

message DeleteClusterResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message InternalCluster {
  Cluster cluster = 1;
  string tenant_id = 2;
}

message ListInternalClustersRequest {
}

message ListInternalClustersResponse {
  repeated InternalCluster clusters = 1;
}

service ClustersService {

  rpc CreateCluster(CreateClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      post: "/v1/clusters"
      body: "*"
    };
  }

  rpc ListClusters(ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {
      get: "/v1/clusters"
    };
  }

  rpc GetCluster(GetClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      get: "/v1/clusters/{id}"
    };
  }

  rpc DeleteCluster(DeleteClusterRequest) returns (DeleteClusterResponse) {
    option (google.api.http) = {
      delete: "/v1/clusters/{id}"
    };
  }
}

service ClustersInternalService {
  rpc ListInternalClusters(ListInternalClustersRequest) returns (ListInternalClustersResponse) {
  }

}

message GetSelfClusterRequest {
}

message ComponentStatus {
  bool isHealthy = 1;
  string message = 2;
}

message UpdateComponentStatusRequest {
  string name = 1;
  ComponentStatus status = 2;
}

service ClustersWorkerService {
  // GetSelfCluster returns the cluster to which the worker cluster itself belongs.
  rpc GetSelfCluster(GetSelfClusterRequest) returns (Cluster);

  // UpdateComponentStatus updates the component's health status to the cluster.
  rpc UpdateComponentStatus(UpdateComponentStatusRequest) returns (google.protobuf.Empty) {}
}
